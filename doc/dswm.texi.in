\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename dswm.info
@settitle DSWM Manual
@setchapternewpage odd
@c %**end of header

@dircategory X11
@direntry
* DSWM: (dswm).       A Common Lisp window manager
@end direntry

@c @ifinfo
@c This is the Deep Space Window Manager user manual.

@c Copyright @copyright{} 2000-2008 Shawn Betts

@c Permission is granted to make and distribute verbatim
@c copies of this manual provided the copyright notice and
@c this permission notice are preserved on all copies.

@c @ignore
@c Permission is granted to process this file through TeX
@c and print the results, provided the printed document
@c carries a copying permission notice identical to this
@c one except for the removal of this paragraph (this
@c paragraph not being relevant to the printed manual).

@c @end ignore
@c Permission is granted to copy and distribute modified
@c versions of this manual under the conditions for
@c verbatim copying, provided also that the sections
@c entitled ``Copying'' and ``GNU General Public License''
@c are included exactly as in the original, and provided
@c that the entire resulting derived work is distributed
@c under the terms of a permission notice identical to this
@c one.

@c Permission is granted to copy and distribute
@c translations of this manual into another language,
@c under the above conditions for modified versions,
@c except that this permission notice may be stated in a
@c translation approved by the Free Software Foundation.
@c @end ifinfo

@c @iftex
@c @kbdinputstyle code
@c @end iftex

@c @titlepage
@c @sp 10
@c @titlefont{The Deep Space Window Manager}
@c @author Alexander Vynnyk

@c @page
@c @vskip 0pt plus 1filll
@c Copyright @copyright{} 2000-2008 Shawn Betts

@c Permission is granted to make and distribute verbatim
@c copies of this manual provided the copyright notice and
@c this permission notice are preserved on all copies.

@c Permission is granted to copy and distribute modified
@c versions of this manual under the conditions for
@c verbatim copying, provided also that the sections
@c entitled ``Copying'' and ``GNU General Public License''
@c are included exactly as in the original, and provided
@c that the entire resulting derived work is distributed
@c under the terms of a permission notice identical to this
@c one.

@c Permission is granted to copy and distribute
@c translations of this manual into another language,
@c under the above conditions for modified versions,
@c except that this permission notice may be stated in a
@c translation approved by the Free Software Foundation.
@c @end titlepage

@c @node Top, Introduction, (dir), (dir)

@c @ifinfo
@c This document explains how to use The Deep Space Window Manager.
@c @end ifinfo

@c @menu
@c * Introduction::                
@c * Key Bindings::                
@c * Commands::                    
@c * Message and Input Bar::       
@c * Windows::                     
@c * Frames::                      
@c * Mode-line::                   
@c * Groups::                      
@c * Screens::                     
@c * Interacting With Unix::       
@c * Interacting With X11::        
@c * Miscellaneous Commands::      
@c * Colors::                      
@c * Hooks::                       
@c * Modules::                     
@c * Hacking::                     
@c * Command and Function Index::  
@c * Variable Index::              

@c @detailmenu
@c  --- The Detailed Node Listing ---

@c Introduction

@c * Starting DSWM::            
@c * Basic Usage::                 
@c * Interacting with the Lisp process::  
@c * Contact the DSWM developers::  

@c Key Bindings

@c * List of Default Keybindings::  
@c * Binding Keys::                
@c * Modifiers::                   

@c Message and Input Bar

@c * Customizing The Bar::         
@c * Using The Input Bar::         
@c * Programming The Message Bar::  
@c * Programming the Input Bar::   

@c Windows

@c * Window Marks::                
@c * Customizing Window Appearance::  
@c * Controlling Raise And Map Requests::  
@c * Programming With Windows::    
@c * Rule Based Window Placement::  
@c * Remember-Forget-Recall Subsystem::  

@c Frames

@c * Interactively Resizing Frames::  
@c * Frame Dumping::               

@c Groups

@c * Customizing Groups::          

@c Screens

@c * Xinerama::                    
@c * Programming With Screens::    

@c Miscellaneous Commands

@c * Menus::                       
@c * DSWM's Data Directory::    
@c * Debugging DSWM::           
@c * Timers::                      
@c * Getting Help::                

@c Colors

@c * Behind The Scenes Look At Colors::  

@c Hacking

@c * General Advice::              
@c * Using git with DSWM::      
@c * Sending Patches::             

@c @end detailmenu
@c @end menu

@c @node Introduction, Key Bindings, Top, Top
@c @chapter Introduction
@c DSWM is an X11 window manager written entirely in Common Lisp. Its
@c user interface goals are similar to ratpoison's but with an emphasis on
@c customizability, completeness, and cushiness.

@c @menu
@c * Starting DSWM::            
@c * Basic Usage::                 
@c * Interacting with the Lisp process::  
@c * Contact the DSWM developers::  
@c @end menu

@c @node Starting DSWM, Basic Usage, Introduction, Introduction
@c @section Starting DSWM
@c There are a number of ways to start DSWM but the most straight
@c forward method is as follows. This assumes you have a copy of the
@c DSWM source code and are using the @samp{SBCL} Common Lisp
@c environment.

@c @enumerate
@c @item
@c Install @command{sbcl}, the @command{portable-clx} package, and
@c @command{cl-ppcre}. In Debian, @command{portable-clx} is the
@c @command{cl-clx-sbcl} package. You can also use @command{asdf-install} to
@c download and install@tie{}@command{clx}:

@c @example
@c $ sbcl
@c * (require :asdf)
@c * (require :asdf-install)
@c * (asdf-install:install :clx)
@c * (asdf-install:install :cl-ppcre)
@c @end example

@c Note that @command{asdf-install} requires @command{gnupg}.

@c @item
@c In the @file{dswm} directory, run @command{./configure}.

@c @item
@c run @command{make}. If all goes well,
@c this should create a @file{dswm} executable.

@c @item
@c In your @file{~/.xinitrc} file include the line
@c @command{/path/to/dswm}. Remember to replace @samp{/path/to/}
@c with the actual path.

@c @item
@c Finally, start X windows with @command{startx}. Cross your
@c fingers. You should see a @samp{Welcome To the Deep Space Window Manager}
@c message pop up in the upper, right corner. At this point, you have
@c successfully started DSWM.
@c @end enumerate

@c @node Basic Usage, Interacting with the Lisp process, Starting DSWM, Introduction
@c @section Some definitions
@c In this manual we will use some special definitions:

@c @subsection Key sequences
@c @kbd{PREF} - means prefix keyboard sequence. It is @kbd{Control + j} by default
@c @kbd{C-k}  - means, that you have to press keys ``Control'' and ``k'' at one time
@c @kbd{M-k}  - means, that you have to press keys ``Alt and ``k'' at one time
@c @kbd{S-k}  - means, that you have to press keys ``Shift'' and ``k'' at one time
@c @kbd{C-K}  - means, that you have to press keys ``Control'', ``Shift'' and ``k'' at one time
@c @kbd{s-k}  - means, that you have to press keys ``Windows''-key (``super'') and ``k'' at one time
@c @kbd{PREF g k}  - means, that you have to press prefix key sequence, then press ``g'' and then press ``k''

@c @section Basic Usage
@c Once you have DSWM up and running, the first thing you might want
@c to do is start @command{emacs}. Type @kbd{PREF e}, or in other words
@c @kbd{Control + j} followed by @kbd{e}. Now perhaps you want an
@c @command{xterm}. Type @kbd{PREF c}. Now you have some programs running.

@c To see a list of windows DSWM is managing, type @kbd{PREF w}. The
@c highlighted window is the one you're looking at right now. It's the
@c focused window.

@c All of DSWM's keys are bound to named commands, which can be
@c executed not only by keys but also from the input bar. Type @kbd{PREF
@c ;} to open a command prompt. Now type @command{time} and press
@c return. Note, @command{time} can also be called by typing @kbd{PREF a}.
@c Throughout this manual you'll find definitions for commands,
@c functions, and variables. Any command you see in this manual can be
@c executed from the input bar or bound to a key.

@c At this point you probably want to switch back from your new
@c @command{xterm} to @command{emacs}. Type @kbd{PREF PREF}. This runs the
@c @command{other} command. Type it again and you're back to xterm.

@c Perhaps you'd like to see @command{emacs} and @command{xterm}
@c side-by-side. Type @kbd{PREF s}. You have now split the screen into 2
@c @command{frames}. For more information see @ref{Frames}. To switch to the
@c empty frame type @kbd{PREF TAB}. Now let's pull the xterm window into
@c this empty frame. Type @kbd{PREF w} for a window listing. Find the
@c @command{xterm} window. See the number beside it? Type @kbd{PREF} followed
@c by @command{xterm}'s window number.

@c Another common activity is browsing the interwebs. Type @kbd{PREF !}.
@c The input bar pops up again. You can now run a shell command.  Let's
@c start a web browser: type @command{firefox} into the input bar and press
@c return.

@c Unfortunately, @command{firefox} probably isn't wide enough because it's
@c in one of the frames. Type @kbd{PREF Q} to remove all frames but the
@c current one and resize it to fit the screen.

@c For a full list of key bindings, see @ref{List of Default Keybindings}.

@c @node Interacting with the Lisp process, Contact the DSWM developers, Basic Usage, Introduction
@c @section Interacting with the Lisp process

@c Since DSWM is a Lisp program, there is a way for you to evaluate
@c Lisp code directly, on the same Lisp process that DSWM is running on.
@c Type @kbd{PREF :} and an input box will appear. Then type some Lisp
@c expression.

@c When you call @command{eval} this way, you will be in the DSWM-USER
@c package, which imports all the exported symbols from the main DSWM
@c package.

@c @table @code
@c @item *mode-line-border-width*
@c Reads the value of @var{*mode-line-border-width*}.

@c @item (setf *mode-line-border-width* 3)
@c Sets the variable @var{*mode-line-border-width*} to 3.

@c @item (set-prefix-key (kbd "C-M-H-s-z"))
@c Calls the @code{set-prefix-key} function (and sets a new keyboard prefix)
@c @end table


@c @node Contact the DSWM developers,  , Interacting with the Lisp process, Introduction
@c @section Contact the DSWM developers
@c The DSWM home page is @url{http://dswm.nongnu.org/}.

@c You can reach Shawn Betts at @email{sabetts at vcn.bc.ca}.

@c The DSWM mailing list is @email{dswm-devel@@nongnu.org} which
@c you can subscribe to at
@c @url{http://mail.nongnu.org/mailman/listinfo/dswm-devel}. Posting
@c is restricted to subscribers to keep spam out of the archives.

@c The DSWM IRC channel can be found on Freenode at
@c @uref{irc://irc.freenode.net/#dswm, @code{#dswm}}.

@c @node Key Bindings, Commands, Introduction, Top
@c @chapter Key Bindings
@c DSWM is controlled entirely by keystrokes and Lisp commands. It
@c mimics GNU Screen's keyboard handling. DSWM's default prefix key is
@c @kbd{PREF}.

@c @menu
@c * List of Default Keybindings::  
@c * Binding Keys::                
@c * Modifiers::                   
@c @end menu

@c @node List of Default Keybindings, Binding Keys, Key Bindings, Key Bindings
@c @section List of Default Keybindings
@c The following is a list of keybindings.

@c @table @kbd
@c @item PREF @var{d}
@c Select the window with the corresponding digit@tie{}@var{d}

@c @item PREF C-@var{d}
@c Pull the window with the corresponding digit@tie{}@var{d} into the current frame

@c @item PREF n
@c @itemx PREF C-n
@c @itemx PREF Space
@c Go to the next window in the window list

@c @item PREF p
@c @itemx PREF C-p
@c Go to the previous window in the window list

@c @item PREF '
@c Go to a window by name

@c @item PREF "
@c Select a window from a list and focus the window.

@c @item PREF C-g
@c Abort the current command. This is useful if you accidentally hit @kbd{PREF}

@c @item PREF w
@c List all the windows

@c @item PREF i
@c Display information about the current window.

@c @item PREF f
@c Select a frame by number

@c @item PREF s
@c Split current frame vertically

@c @item PREF S
@c Split current frame horizontally

@c @item PREF k
@c @itemx PREF C-k
@c Sends a kill message to the current frame and the running program.

@c @item PREF K
@c Kills the current frame and running program; like a @command{kill -9}.

@c @item PREF c
@c @itemx PREF C-c
@c Run an X terminal; by default @command{xterm}

@c @item PREF e
@c @itemx PREF C-e
@c Run Emacs or raise it if it is already running.

@c @item PREF t
@c Sends a @kbd{PREF} to the frame; this is useful for applications like Firefox
@c which make heavy use of @kbd{PREF} (in Firefox's case, for opening a new
@c tab). This is similar to how GNU screen uses @kbd{C-a a}.

@c @item PREF w
@c @itemx PREF C-w
@c Prints out a list of the windows, their number, and their name.

@c @item PREF b
@c @itemx PREF C-b
@c Runs your default browser.

@c @item PREF a
@c @itemx PREF C-a
@c Display the current time and date, much like the Unix command @command{date}.

@c @item PREF PREF
@c Switch to the last window to have focus in the current frame.

@c @item PREF !
@c Prompt for a shell command to run via @file{/bin/sh}. All output is discarded.

@c @item PREF R
@c If the screen is split into multiple frames, one split will be
@c undone. If there is only one split, the effect will be the same as @kbd{PREF Q}.

@c @item PREF o
@c @itemx PREF TAB
@c If the screen is split into multiple frames, focus shifts to the
@c @command{next} frame, where it cycles to the right and then down; analogous
@c to @kbd{C-x o} in Emacs.

@c @item PREF F
@c Display ``Current Frame'' in the frame which has focus.

@c @item PREF ;
@c Opens the input box. DSWM commands can be run from here, and the
@c input history moved through.

@c @item PREF :
@c Opens the input box, but all things typed in here will be sent to the
@c Common Lisp interpreter where they will be ran as Lisp programs; thus,
@c input should be valid Common Lisp.

@c @item PREF C-h
@c The short help and basic DSWM information about system and default directories.
@c @item PREF ?
@c The help.

@c @item PREF -
@c Hide all frames and show the root window.

@c @item PREF Q
@c Removes all splits and maximizes the frame with focus.

@c @item PREF Up
@c @itemx PREF Down
@c @itemx PREF Left
@c @itemx PREF Right
@c Shift focus to an adjacent frame in the specified direction. @kbd{PREF Up} will
@c shift focus up, if possible, @kbd{PREF Down} will shift downwards, etc.

@c @item PREF v
@c Prints out the version of the running DSWM.

@c @item PREF #
@c Toggle the mark on the current window

@c @item PREF m
@c @itemx PREF C-m
@c Display the last message. Hitting this keybinding again displays the
@c message before that, and so on.

@c @item PREF l
@c @itemx PREF C-l
@c redisplay the current window and force it to take up the entire frame.

@c @item PREF G
@c Display all groups and windows in each group. For more information see @ref{Groups}.

@c @item PREF F@var{n}
@c Jump to the corresponding group @var{n}. @kbd{PREF F1} jumps to group 1 and so on.
@c J
@c @item PREF g g
@c Show the list of groups.

@c @item PREF g c
@c Create a new group.

@c @item PREF g n
@c @itemx PREF g C-n
@c @itemx PREF g SPC
@c @itemx PREF g C-SPC
@c Go to the next group in the list.

@c @item PREF g !
@c Prompt for a shell command to run via @file{/bin/sh} in new group with same name. All output is discarded.

@c @item PREF g \@
@c Prompt for a shell command to run via @file{/bin/sh} in new float group with same name. All output is discarded.

@c @item PREF g n
@c @itemx PREF g C-n
@c Go to the next group in the list.

@c @item PREF g N
@c Go to the next group in the list and bring the current window along.

@c @item PREF g p
@c @itemx PREF g C-p
@c Go to the previous group in the list.

@c @item PREF g P
@c Go to the previous group in the list and bring the current window along.

@c @item PREF g '
@c Select a group by name or by number.

@c @item PREF g "
@c Select a group from a list and switch to it.

@c @item PREF g m
@c Move the current window to the specified group.

@c @item PREF g k
@c Kill the current group. All windows are merged into the next group.

@c @item PREF g A
@c @itemx PREF g r
@c Change the current group's name.

@c @item PREF g @var{d}
@c Go to the group with digit @var{d}. @kbd{PREF g 1} jumps to group 1 and so on.

@c @item PREF +
@c Make frames the same height or width in the current frame's subtree.

@c @item PREF h k
@c Describe the specified key binding.

@c @item PREF h f
@c Describe the specified function.

@c @item PREF h v
@c Describe the specified variable.

@c @item PREF h w
@c List all key sequences that are bound to the specified command

@c @item PREF h c
@c Describe the specified command.
@c @end table

@c @node Binding Keys, Modifiers, List of Default Keybindings, Key Bindings
@c @section Binding Keys

@c @@@ define-key
@c @@@ undefine-key
@c @@@ kbd
@c !!! set-prefix-key

@c @@@ make-sparse-keymap

@c ### *root-map*
@c ### *top-map*
@c ### *groups-map*

@c !!! bind

@c @node Modifiers,  , Binding Keys, Key Bindings
@c @section Modifiers

@c Many users have had some difficulty with setting up modifiers for
@c DSWM keybindings. This is caused by a combination of how DSWM
@c handles modifiers and the default modifiers list for many users' X
@c servers.

@c @itemize

@c @item
@c My ``Super'' key doesn't work!

@c This is most likely caused by having the Hyper and Super keys listed
@c as the same modifier in the modifier list.

@c @example
@c $ xmodmap
@c xmodmap:  up to 3 keys per modifier, (keycodes in parentheses):

@c shift       Shift_L (0x32),  Shift_R (0x3e)
@c lock        Caps_Lock (0x42)
@c control     Control_L (0x25),  Control_R (0x6d)
@c mod1        Alt_L (0x40),  Alt_R (0x71),  Meta_L (0x9c)
@c mod2        Num_Lock (0x4d)
@c mod3
@c mod4        Super_L (0x7f),  Hyper_L (0x80)
@c mod5        Mode_switch (0x5d),  ISO_Level3_Shift (0x7c)
@c @end example

@c The problem is in the line beginning with ``mod4''. The way to set up
@c the modifier list correctly is to have just the Super key as the mod4
@c modifier. The following @command{xmodmap} commands will do just that.

@c @example
@c # clear out the mod4 modifier
@c $ xmodmap -e 'clear mod4'
@c $ xmodmap
@c xmodmap:  up to 3 keys per modifier, (keycodes in parentheses):

@c shift       Shift_L (0x32),  Shift_R (0x3e)
@c lock        Caps_Lock (0x42)
@c control     Control_L (0x25),  Control_R (0x6d)
@c mod1        Alt_L (0x40),  Alt_R (0x71),  Meta_L (0x9c)
@c mod2        Num_Lock (0x4d)
@c mod3
@c mod4
@c mod5        Mode_switch (0x5d),  ISO_Level3_Shift (0x7c)

@c # add Super as a mod4 modifier
@c $ xmodmap -e 'add mod4 = Super_L'
@c $ xmodmap
@c xmodmap:  up to 3 keys per modifier, (keycodes in parentheses):

@c shift       Shift_L (0x32),  Shift_R (0x3e)
@c lock        Caps_Lock (0x42)
@c control     Control_L (0x25),  Control_R (0x6d)
@c mod1        Alt_L (0x40),  Alt_R (0x71),  Meta_L (0x9c)
@c mod2        Num_Lock (0x4d)
@c mod3
@c mod4        Super_L (0x73),  Super_L (0x7f)
@c mod5        Mode_switch (0x5d),  ISO_Level3_Shift (0x7c)
@c @end example

@c You can automate this by storing the commands in a file and calling
@c xmodmap when you start your X session.

@c @example
@c $ cat ~/.Xmodmap
@c clear mod4
@c add mod4 = Super_L
@c @end example

@c If you use @command{startx}, modify your @file{~/.xsession} or @file{~/.xinitrc} file.

@c @example
@c $ cat ~/.xsession
@c #!/bin/sh

@c xmodmap ~/.Xmodmap
@c exec /usr/bin/dswm
@c @end example

@c If you use a graphical login manager (GDM, KDM, etc.), your @file{~/.Xmodmap}
@c file should be fed to @command{xmodmap} when you log in. FIXME: verify this.

@c @item
@c Handling Meta and Alt: when do I use @kbd{M-} and @kbd{A-}?

@c If you have no Meta keys defined (see the output of the @command{xmodmap}
@c command), then DSWM will treat the @kbd{M-} prefix in keybindings to
@c mean Alt. However, if there are Meta keys defined, then the @kbd{M-}
@c prefix refers to them, and the @kbd{A-} prefix refers to Alt.

@c Most users will simply use @kbd{M-} to refer to their Alt keys. However,
@c users that define separate Meta and Alt keys will use @kbd{M-} to refer
@c to the former, and @kbd{A-} to refer to the latter.

@c @item
@c How can I set up a Hyper key and use it with DSWM?

@c To set up a Hyper key, you need to do two things: bind a physical key
@c to be a Hyper key, and add that key to the modifiers list.

@c The following example shows how to bind the control key at the
@c bottom-left of most keyboards to be Hyper. This is useful if you've
@c made Caps Lock into a control key, and have no use for the bottom-left
@c key.

@c @example
@c $ xmodmap -e 'keycode 37 = Hyper_L'
@c $ xmodmap -e 'clear mod5'
@c $ xmodmap -e 'add mod5 = Hyper_L'
@c @end example

@c To use a different key for Hyper, replace the keycode ``37'' above.
@c Use the @command{xev} program to see the keycode that any physical key has.
@c Refer to the section above on setting up the Super key to see how to
@c automate setting the Hyper key when you start X.

@c Now you can use @kbd{H-} as a prefix in DSWM bindings.

@c @example
@c (define-key *top-map* (kbd "H-RET") "fullscreen")
@c (define-key *top-map* (kbd "H-Left") "gprev")
@c (define-key *top-map* (kbd "H-Right") "gnext")
@c (define-key *top-map* (kbd "H-TAB") "other")
@c @end example

@c Since essentially no programs have Hyper bindings, you can safely bind
@c commands to the @var{*top-map*}.

@c @end itemize

@c @node Commands, Message and Input Bar, Key Bindings, Top
@c @chapter Commands
@c If you've used emacs before you'll find commands and functions
@c familiar. Commands are functions that can be bound to keys and
@c executed interactively from DSWM's input bar. A command expects a
@c certain number of arguments and any that are not supplied will be
@c prompted for.

@c FIXME: actually write some docs here

@c @node Message and Input Bar, Windows, Commands, Top
@c @chapter Message and Input Bar

@c !!! echo
@c !!! colon

@c @menu
@c * Customizing The Bar::         
@c * Using The Input Bar::         
@c * Programming The Message Bar::  
@c * Programming the Input Bar::   
@c @end menu

@c @node Customizing The Bar, Using The Input Bar, Message and Input Bar, Message and Input Bar
@c @section Customizing The Bar
@c The bar's appearance and behavior can be modified with the following
@c functions and variables.

@c @@@ set-fg-color
@c @@@ set-bg-color
@c @@@ set-border-color
@c @@@ set-msg-border-width
@c @@@ set-font

@c ### *message-window-padding*
@c ### *message-window-gravity*
@c ### *timeout-wait*
@c ### *input-window-gravity*

@c @node Using The Input Bar, Programming The Message Bar, Customizing The Bar, Message and Input Bar
@c @section Using The Input Bar

@c The following is a list of keybindings for the Input Bar. Users of Emacs
@c will recognize them.

@c @table @kbd
@c @item DEL
@c Delete the character before point (@code{delete-backward-char}).

@c @item M-DEL
@c Kill back to the beginning of the previous word (@code{backward-kill-word}).

@c @item C-d
@c @itemx Delete
@c Delete the character after point (@code{delete-forward-char}).

@c @item M-d
@c Kill forward to the end of the next word (@code{forward-kill-word}).

@c @item C-f
@c @itemx Right
@c Move forward one character (@code{forward-char}).

@c @item M-f
@c Move forward one word (@code{forward-word}).

@c @item C-b
@c @itemx Left
@c Move backward one character (@code{backward-char}).

@c @item M-b
@c Move backward one word (@code{backward-word}).

@c @item C-a
@c @itemx Home
@c Move to the beginning of the current line (@code{move-beginning-of-line}).

@c @item C-e
@c @itemx End
@c Move to the end of the current line (@code{move-end-of-line}).

@c @item C-k
@c Kill to the end of the line (@code{kill-line}).

@c @item C-u
@c Kill to the beginning of the line (@code{kill-to-beginning}),
@c the same as @kbd{C-a C-k}.

@c @item C-p
@c @itemx Up
@c Move to the next earlier entry saved in the command history (@command{history-back}).

@c @item C-n
@c @itemx Down
@c Move to the next later entry saved in the command history (@command{history-forward}).

@c @item RET
@c Submit the entered command (@command{submit}).

@c @item C-g
@c Abort the current action by closing the Input Bar (@command{abort}).

@c @item C-y
@c Paste text from clipboard into the Input Bar (@command{yank-selection}).

@c @item TAB
@c Clockwise tab complete the current string, if possible. Press @kbd{TAB} again to
@c cycle through completions.
 
@c @item S-TAB
@c Counter-clockwise tab complete the current string, if possible. Press @kbd{S-TAB} again to
@c cycle through completions.

@c @end table

@c @node Programming The Message Bar, Programming the Input Bar, Using The Input Bar, Message and Input Bar
@c @section Programming The Message Bar

@c @@@ echo-string
@c @@@ message
@c ### *input-history-ignore-duplicates*
@c !!! copy-last-message

@c @node Programming the Input Bar,  , Programming The Message Bar, Message and Input Bar
@c @section Programming the Input Bar
@c New input behavior can be added to the input bar by creating editing
@c functions and binding them to keys in the @var{*input-map*} using
@c @command{define-key}, just like other key bindings.

@c An input function takes 2 arguments: the input structure and the key pressed.

@c @@@ read-one-line
@c @@@ read-one-char
@c @@@ completing-read
@c @@@ input-insert-string
@c @@@ input-insert-char

@c ### *input-map*

@c @node Windows, Frames, Message and Input Bar, Top
@c @chapter Windows

@c !!! next
@c !!! pull-hidden-next
@c !!! prev
@c !!! pull-hidden-previous
@c !!! delete-window
@c !!! kill-window
@c !!! other-window
@c !!! pull-hidden-other
@c !!! renumber
@c !!! meta
@c !!! select-window
@c !!! select-window-by-number
@c !!! title
@c !!! windowlist
@c !!! fullscreen
@c !!! window-info
@c !!! refresh
@c !!! redisplay

@c ### *window-format*
@c ### *window-name-source*
@c ### *new-window-prefered-frame*

@c @menu
@c * Window Marks::                
@c * Customizing Window Appearance::  
@c * Controlling Raise And Map Requests::  
@c * Programming With Windows::    
@c * Rule Based Window Placement::  
@c * Remember-Forget-Recall Subsystem::  
@c @end menu

@c @node Window Marks, Customizing Window Appearance, Windows, Windows
@c @section Window Marks
@c Windows can be marked. A marked window has a # beside it in the window
@c list. Some commands operate only on marked windows.

@c !!! mark
@c !!! clear-window-marks
@c !!! pull-marked

@c @node Customizing Window Appearance, Controlling Raise And Map Requests, Window Marks, Windows
@c @section Customizing Window Appearance

@c ### *maxsize-border-width*
@c ### *transient-border-width*
@c ### *normal-border-width*
@c ### *window-border-style*

@c @@@ set-win-bg-color
@c @@@ set-focus-color
@c @@@ set-unfocus-color
@c @@@ set-normal-gravity
@c @@@ set-maxsize-gravity
@c @@@ set-transient-gravity

@c !!! gravity

@c @node Controlling Raise And Map Requests, Programming With Windows, Customizing Window Appearance, Windows
@c @section Controlling Raise And Map Requests
@c It is sometimes handy to deny a window's request to be focused. The
@c following variables determine such behavior.

@c A map request occurs when a new or withdrawn window requests to be
@c mapped for the first time.

@c A raise request occurs when a client asks the window manager to give
@c an existing window focus.

@c ### *deny-map-request*
@c ### *deny-raise-request*
@c ### *suppress-deny-messages*

@c Some examples follow.

@c @example
@c ;; Deny the firefox window from taking focus when clicked upon.
@c (push '(:class "gecko") dswm:*deny-raise-request*)

@c ;; Deny all map requests
@c (setf dswm:*deny-map-request* t)

@c ;; Deny transient raise requests
@c (push '(:transient) dswm:*deny-map-request*)

@c ;; Deny the all windows in the xterm class from taking focus.
@c (push '(:class "Xterm") dswm:*deny-raise-request*)
@c @end example

@c @node Programming With Windows, Rule Based Window Placement, Controlling Raise And Map Requests, Windows
@c @section Programming With Windows

@c %%% define-window-slot

@c @@@ window-send-string
@c ### *default-window-name*

@c @node Rule Based Window Placement, Remember-Forget-Recall Subsystem, Programming With Windows, Windows
@c @section Rule Based Window Placement

@c %%% define-frame-preference

@c @node Remember-Forget-Recall Subsystem, , Rule Based Window Placement, Windows
@c @section Remember-Forget-Recall Subsystem

@c !!! remember
@c !!! forget
@c !!! recall

@c @@@ remember-group
@c @@@ remember-screen
@c @@@ remember-desktop
@c @@@ remember-window-placement
@c @@@ remember-group-windows-placement
@c @@@ remember-screen-windows-placement
@c @@@ remember-all-window-placement
@c @@@ remember-all
@c @@@ forget-group
@c @@@ forget-screen
@c @@@ forget-desktop
@c @@@ forget-window-placement
@c @@@ forget-group-windows-placement
@c @@@ forget-screen-windows-placement
@c @@@ forget-all-window-placement
@c @@@ forget-all
@c @@@ recall-group
@c @@@ recall-screen
@c @@@ recall-desktop
@c @@@ recall-window-placement
@c @@@ recall-group-windows-placement
@c @@@ recall-screen-windows-placement
@c @@@ recall-all-window-placement
@c @@@ recall-all

@c @node Frames, Mode-line, Windows, Top
@c @chapter Frames
@c Frames contain windows. All windows exist within a frame.

@c Those used to ratpoison will notice that this differs from ratpoison's
@c window pool, where windows and frames are not so tightly connected.

@c !!! pull-window-by-number
@c !!! hsplit
@c !!! vsplit
@c !!! remove-split
@c !!! only
@c !!! curframe
@c !!! fnext
@c !!! sibling
@c !!! fother
@c !!! fselect
@c !!! resize
@c !!! balance-frames
@c !!! fclear
@c !!! move-focus
@c !!! move-window
@c !!! next-in-frame
@c !!! prev-in-frame
@c !!! other-in-frame
@c !!! echo-frame-windows
@c !!! exchange-direction

@c ### *min-frame-width*
@c ### *min-frame-height*
@c ### *new-frame-action*

@c @menu
@c * Interactively Resizing Frames::  
@c * Frame Dumping::               
@c @end menu

@c @node Interactively Resizing Frames, Frame Dumping, Frames, Frames
@c @section Interactively Resizing Frames
@c There is a mode called @code{iresize} that lets you interactively
@c resize the current frame. To enter the mode use the @code{iresize}
@c command or type @key{PREF r}.

@c The following keybindings apply to the mode:
@c @table @kbd
@c @item C-p
@c @itemx Up
@c @itemx k
@c Shrink the frame vertically.

@c @item C-n
@c @itemx Down
@c @itemx j
@c Expand the frame vertically.

@c @item C-f
@c @itemx Right
@c @itemx l
@c Expand the frame horizontally.

@c @item C-b
@c @itemx Left
@c @itemx h
@c Shrink the frame horizontally.

@c @item C-g
@c @itemx ESC
@c Abort the interactive resize. NOTE: This currently doesn't work.

@c @item RET
@c Select the highlighted option.

@c @end table

@c !!! iresize
@c !!! abort-iresize
@c !!! exit-iresize

@c ### *resize-increment*

@c @node Frame Dumping,  , Interactively Resizing Frames, Frames
@c @section Frame Dumping
@c The configuration of frames and groups can be saved and restored using
@c the following commands.

@c !!! dump-desktop-to-file
@c !!! dump-group-to-file
@c !!! dump-screen-to-file
@c !!! restore-from-file
@c !!! place-existing-windows

@c @node Mode-line, Groups, Frames, Top
@c @chapter The Mode Line
@c The mode line is a bar that runs across either the top or bottom of
@c a head and is used to display information. By default the mode line
@c displays the list of windows, similar to the output @kbd{PREF w} produces.

@c Alternatively, external panel applications such as the GNOME panel and
@c KDE's kicker may be used. Simply starting one of these programs is enough
@c to set it as the mode line of the head it would like to be on (if the
@c panel is Xinerama aware) or whichever head is available. In order to
@c avoid problems displaying menus, configure your panel application for
@c positioning at the top or bottom of the head rather than relying on
@c @var{*mode-line-position*}

@c The mode line can be turned on and off with the @command{mode-line}
@c command or the lisp function @code{dswm:toggle-mode-line}. Each
@c head has its own mode line. For example:

@c @example
@c ;; turn on/off the mode line for the current head only.
@c (dswm:toggle-mode-line (dswm:current-screen)
@c                           (dswm:current-head))
@c @end example

@c The mode line is updated after every DSWM command.

@c To display the window list and the current date on the modeline, one
@c might do the following:

@c @example
@c (setf dswm:*screen-mode-line-format*
@c       (list "%w | "
@c             '(:eval (dswm:run-shell-command "date" t))))
@c @end example

@c @code{(dswm:run-shell-command "date" t)} runs the command
@c @command{date} and returns its output as a string.

@c !!! mode-line

@c @@@ toggle-mode-line

@c ### *screen-mode-line-format*

@c The following variables control the color, position, and size of the
@c mode line.

@c ### *mode-line-position*
@c ### *mode-line-border-width* 1
@c ### *mode-line-pad-x* 
@c ### *mode-line-pad-y* 
@c ### *mode-line-background-color* 
@c ### *mode-line-foreground-color* 
@c ### *mode-line-border-color* 
@c ### *mode-line-timeout*

@c @node Groups, Screens, Mode-line, Top
@c @chapter Groups
@c Groups in DSWM are more commonly known as @dfn{virtual desktops} or
@c @dfn{workspaces}. Why not create a new term for it?

@c !!! gnew
@c !!! gnew-float
@c !!! gnewbg
@c !!! gnewbg-float
@c !!! gnext
@c !!! gprev
@c !!! gnext-with-window
@c !!! gprev-with-window
@c !!! gother
@c !!! gmerge
@c !!! vgroups
@c !!! gselect
@c !!! gmove
@c !!! gkill
@c !!! grename
@c !!! grouplist
@c !!! grun
@c !!! grun-new
@c !!! grun-new-float
@c @menu
@c * Customizing Groups::          
@c @end menu

@c @node Customizing Groups,  , Groups, Groups
@c @section Customizing Groups

@c ### *group-formatters*
@c ### *group-format*

@c @@@ current-group

@c @node Screens, Interacting With Unix, Groups, Top
@c @chapter Screens
@c DSWM handles multiple screens.

@c !!! snext
@c !!! sprev
@c !!! sother

@c @menu
@c * Xinerama::                    
@c * Programming With Screens::    
@c @end menu

@c @node Xinerama, Programming With Screens, Screens, Screens
@c @section Xinerama
@c DSWM will attempt to detect Xinerama heads at startup (and at no other
@c time.) Heads are logically contained by screens. In a dual-monitor Xinerama
@c configuration, there will be one screen with two heads. Non-rectangular layouts
@c are supported (frames will not be created in the 'dead zone'.) And message
@c windows will be displayed on the current head--that is, the head to which the
@c currently focused frame belongs.

@c @node Programming With Screens,  , Xinerama, Screens
@c @section Programming With Screens

@c @@@ current-screen

@c @@@ screen-current-window

@c @@@ current-window

@c ### *screen-list*
        
@c @node Interacting With Unix, Interacting With X11, Screens, Top
@c @chapter Interacting With Unix

@c !!! run-shell-command

@c @@@ programs-in-path
@c @@@ pathname-is-executable-p

@c ### *shell-program*

@c @@@ getenv
@c @@@ (setf getenv)

@c @node Interacting With X11, Miscellaneous Commands, Interacting With Unix, Top
@c @chapter Interacting With X11

@c @@@ set-x-selection
@c @@@ get-x-selection

@c @node Miscellaneous Commands, Colors, Interacting With X11, Top
@c @chapter Miscellaneous Commands
@c The following is a list of commands that don't really fit in any other
@c section.

@c !!! editor
@c !!! banish
@c !!! ratwarp
@c !!! ratrelwarp
@c !!! ratclick
@c !!! echo-date
@c !!! eval-line
@c !!! window-send-string
@c !!! reload
@c !!! loadrc
@c !!! keyboard-quit
@c !!! quit
@c !!! restart-hard
@c !!! restart-soft
@c !!! getsel
@c !!! putsel
@c !!! command-mode
@c !!! copy-unhandled-error
@c !!! commands
@c !!! lastmsg
@c !!! window-full-info

@c @@@ run-commands

@c %%% defcommand
@c %%% define-dswm-type

@c @@@ run-or-raise

@c ### *run-or-raise-all-groups*
@c ### *run-or-raise-all-screens*

@c @@@ restarts-menu

@c %%% with-restarts-menu

@c ### *suppress-abort-messages*
@c ### *default-package*

@c %%% defprogram-shortcut

@c ### *initializing*

@c @menu
@c * Menus::                       
@c * DSWM's Data Directory::    
@c * Debugging DSWM::           
@c * Timers::                      
@c * Getting Help::                
@c @end menu

@c @node Menus, DSWM's Data Directory, Miscellaneous Commands, Miscellaneous Commands
@c @section Menus
@c Some commands present the options in a menu. The following are the menu key bindings:

@c @table @kbd
@c @item C-p
@c @itemx Up
@c @itemx k
@c Highlight the previous menu option.

@c @item C-n
@c @itemx Down
@c @itemx j
@c Highlight the next menu option.

@c @item C-g
@c @itemx ESC
@c Abort the menu.

@c @item RET
@c Select the highlighted option.

@c @end table

@c @node DSWM's Data Directory, Debugging DSWM, Menus, Miscellaneous Commands
@c @section DSWM's Directories
@c DSWM uses freedesktop recommendations for directories locations. So,
@c your config and data directories by default are:

@c @table @file
@c @item System configuration file
@c 1. System environment variable @var{$XDG_CONFIG_DIR}
@c 2. If it is not set, than @file{/etc/xdg/dswm/dswm.lisp}

@c @item User configuration file
@c 1. @file{~/.dswm}
@c 2. If it does not exists, than path, which set in system environment
@c variable @var{$XDG_CONFIG_HOME/dswm/init.lisp}
@c 3. If it does not exists too, than @file{~/.config/dswm/init.lisp}

@c @item System data directory
@c 1. System environment variable @var{$XDG_DATA_DIR}
@c 2. If it does not exists, than @file{/usr/local/share/dswm/} (or
@c <where_your_share_prefix>/dswm/)

@c @item User data directory
@c 1. System environment variable @var{$XDG_DATA_HOME/dswm/}
@c 2. If it does not exists, than @file{~/.local/share/dswm/}

@c @end table

@c If you want to store DSWM data between sessions, the recommended
@c method is to store them in DSWM data directory. DSWM supplies
@c some functions to make doing this easier.

@c @@@ data-dir
@c @@@ data-dir-file
@c %%% with-data-file

@c @node Debugging DSWM, Timers, DSWM's Data Directory, Miscellaneous Commands
@c @section Debugging DSWM

@c ### *debug-level*
@c ### *debug-stream*
@c @@@ redirect-all-output

@c @node Timers, Getting Help, Debugging DSWM, Miscellaneous Commands
@c @section Timers
@c DSWM has a timer system similar to that of @dfn{Emacs}.

@c @@@ run-with-timer
@c @@@ cancel-timer

@c @defun timer-p @var{timer}
@c Return T if TIMER is a timer structure.
@c @end defun

@c @node Getting Help,  , Timers, Miscellaneous Commands
@c @section Getting Help

@c !!! describe-key
@c !!! describe-variable
@c !!! describe-function
@c !!! where-is
@c !!! modifiers

@c @node Colors, Hooks, Miscellaneous Commands, Top
@c @chapter Colors
@c All text printed by dswm is run through a coloring engine before
@c being displayed. All color commands start with a @samp{^} (caret)
@c character and apply to all text after it.

@c @table @code
@c @item ^0-9
@c A caret followed by a single digit number changes the foreground color
@c to the specified color. A @samp{*} can be used to specify the normal
@c color. See the color listing below.

@c @item ^0-90-9
@c A caret followed by two digits sets the foreground and background
@c color. The first digit refers to the foreground color and the second
@c digit to the background color. A @samp{*} can be used in place of
@c either digit to specify the normal color. See the color listing below.

@c @item ^B
@c Turn on bright colors.

@c @item ^b
@c Turn off bright colors.

@c @item ^n
@c Use the normal background and foreground color.

@c @item ^R
@c Reverse the foreground and background colors.

@c @item ^r
@c Turn off reverse colors.

@c @item ^[
@c Push the current colors onto the color stack. The current colors remain unchanged.

@c @item ^]
@c Pop the colors off the color stack.

@c @item ^^
@c Print a regular caret.
@c @end table

@c The default colors are made to resemble the 16 VGA colors and are:
@c @table @asis
@c @item 0 black
@c @item 1 red
@c @item 2 green
@c @item 3 yellow
@c @item 4 blue
@c @item 5 magenta
@c @item 6 cyan
@c @item 7 white
@c @end table

@c There are only 8 colors by default but 10 available digits. The last
@c two digits are left up to the user. @ref{Behind The Scenes Look At
@c Colors} for information on customizing colors.

@c @menu
@c * Behind The Scenes Look At Colors::  
@c @end menu

@c @node Behind The Scenes Look At Colors,  , Colors, Colors
@c @section Behind The Scenes Look At Colors

@c Color indexes are stored in @var{*colors*} as a list. The default list
@c of colors leave 2 slots for the user to choose. If you'd like to use
@c @samp{Papaya Whip} and @samp{Dark Golden Rod 3} you might eval the
@c following:

@c @example
@c (setf *colors* (append *colors*
@c                        (list "PapayaWhip"
@c                              "DarkGoldenRod3")))
@c (update-color-map (current-screen))
@c @end example

@c Of course, you can change all the colors if you like.

@c @@@ parse-color-string
@c @@@ uncolorify
@c ### *colors*
@c @@@ update-color-map

@c @node Hooks, Modules, Colors, Top
@c @chapter Hooks
@c DSWM exports a number of hooks you can use to add customizations;
@c like hooks in Emacs, you add to a hook with the @code{add-hook}
@c function. for example:

@c @example
@c (dswm:add-hook 'dswm:*new-window-hook* 'my-new-window-custos)
@c @end example

@c adds your @code{my-new-window-custos} function to the list of
@c functions called when a new window appears.

@c %%% add-hook
@c %%% remove-hook

@c The following hooks are available:

@c $$$ *new-window-hook*
@c $$$ *destroy-window-hook*
@c $$$ *focus-window-hook*
@c $$$ *place-window-hook*
@c $$$ *start-hook*
@c $$$ *internal-loop-hook*
@c $$$ *focus-frame-hook*
@c $$$ *new-frame-hook*
@c $$$ *message-hook*
@c $$$ *top-level-error-hook*
@c $$$ *focus-group-hook*
@c $$$ *key-press-hook*
@c $$$ *root-click-hook*
@c $$$ *mode-line-click-hook*
@c $$$ *urgent-window-hook*
@c $$$ *event-processing-hook*

@c @node Modules, Hacking, Hooks, Top
@c @chapter Modules
@c DSWM has a growing number of modules not loaded by default. All
@c modules exist in the @file{modules/} subdirectory of DSWM's data
@c directories.

@c !!! load-module

@c @node Hacking, Command and Function Index, Modules, Top
@c @chapter Hacking

@c For those of you who have worked on Free Software projects before,
@c this part should probably be fairly intuitive.

@c @menu
@c * General Advice::              
@c * Using git with DSWM::      
@c * Sending Patches::             
@c @end menu

@c @node General Advice, Using git with DSWM, Hacking, Hacking
@c @section Hacking:  General Advice

@c @enumerate

@c @item
@c Pay attention to file names and contents. If you're making changes to
@c mode-line related code, don't put it in @file{core.lisp}. If you're
@c introducing some completely new featureset, consider putting all of
@c the new code in a new file.

@c @item
@c Does a command need to be user-visible (``interactive'') or is it just
@c called by other commands?

@c @itemize
@c @item
@c If it's not going to be user-visible, you can just use the familiar
@c @code{(defun foo () ...)} syntax.

@c @item
@c If you want the command to be used interactively, you use DSWM's
@c @code{defcommand} syntax, as in the examples below.

@c @example
@c (defcommand test (foo bar)
@c    ((:string "How you're going to prompt for variable foo: ")
@c     (:number "How you want to prompt for variable bar: "))
@c    "This command is a test"
@c    (body...))

@c (defcommand test2 () ()
@c    "This is also a test"
@c    (body...))

@c (defcommand title (args) (interactive-args)
@c    "Doc string"
@c    (body...))
@c @end example

@c So basically, inside the first set of parentheses after the
@c function name, you specify what (if any) arguments will be passed to
@c the command. The second set of parentheses tells DSWM how to get
@c those arguments if they're not explicitly passed to the command. For
@c example,

@c @example
@c ((:string "What do you want to do: "))
@c @end example

@c will read a string from the input the user provides. The quoted
@c text is the prompt the user will see. Of course, if you were to, say,
@c call the command test, as defined above, from another piece of code,
@c it wouldn't give the prompt as long as you fed it arguments.
@c @end itemize

@c @item
@c Note that all commands defined using the @code{defcommand} syntax are
@c available both to be called with @kbd{PREF ;} and from within other lisp
@c programs, as though they had been defun-ned (which, in fact, they
@c have).

@c @item
@c Any code that depends on external libraries or programs that some
@c users might not have installed should be placed in the @file{contrib/}
@c directory.

@c @item
@c Don't be afraid to submit your patches to the DSWM mailing list!
@c It may not immediately make it into the official git repository, but
@c individual users might find it useful and apply it to their own setup,
@c or might be willing to offer suggestions on how to improve the code.

@c @item
@c Remember:  DSWM is designed to run on both clisp and on SBCL. If
@c you must use code specific to one or the other, at the very least warn
@c people that it only works with one lisp implementation. Better yet,
@c figure out how to do it in the other distribution and write a
@c statement like this:

@c @example
@c #+clisp
@c (your-clisp-code)
@c #+sbcl
@c (your-sbcl-code)
@c @end example

@c #to wrap the code for each lisp. Of course, the best option is to
@c find a way to use the same code for clisp and SBCL.
@c @end enumerate

@c @node Using git with DSWM, Sending Patches, General Advice, Hacking
@c @section Hacking:  Using git with DSWM

@c For quite a while now, DSWM has been using the git version control
@c system for development. If you're one using one of the official
@c releases or still using the now-obsolete CVS version, you can get the
@c bleeding-edge source code from the official git repository with
@c a single command:

@c @example
@c $ git clone git://git.savannah.nongnu.org/dswm.git
@c @end example

@c After this, you'll have a complete git repository, along with the
@c complete revision history since the switch. Feel free to play around;
@c git has some important features that actually make this safe!

@c Before we get to that stuff, though, you're going to want to tell git
@c about yourself so that your information is included in your commits
@c and patches. The very minimum you're going to want to do is:

@c @example
@c $ git config --global user.name "Anne N. O'Nymous"
@c $ git config --global user.email "anonymous@@foo.org"
@c @end example

@c Be sure to check out the manual for @command{git-config}--there are several
@c options you might want to set, such as enabling colorized output or
@c changing the editor and pager you use when making commits and viewing
@c logs.

@c For the sake of argument, let's say you want to make some major
@c changes to both @file{user.lisp} and @file{core.lisp}, add a file called
@c @file{DANGEROUS_EXPERIMENT_DO_NOT_USE_OR_@-ELSE.lisp}, and remove the manual
@c because you're too 1337 for such things. However, you don't want to
@c break your entire DSWM setup and start over. Thankfully, you don't
@c have to. Before you get started, issue this command from the dswm
@c directory:

@c @example
@c $ git checkout -b experimental
@c @end example

@c You should now find yourself in a new branch, called experimental. To
@c confirm this, type @command{git branch}; there should be
@c an asterisk next to the branch you're currently viewing. At any time,
@c you can type @command{git checkout master} to return to your master branch,
@c and at any time you can have as many branches of the project as you
@c like. If you want to create a new branch based not on the master
@c branch but on your experimental branch, for example, you'd type:

@c @example
@c $ git checkout -b new-experiment experimental
@c @end example

@c This will place you in a newly-created branch called ``new-experiment''
@c which should be identical to your experimental branch as of the last
@c commit (more on that soon). If you're actually typing out the
@c directions, switch back to your old experimental branch like so:

@c @example
@c $ git checkout experimental
@c @end example

@c Anyway, now that you have a new branch, create that new file with the
@c long name, which I'll just call @file{danger.lisp} for brevity. Make whatever
@c changes you want to it, and when you're done, tell git about your new
@c file.

@c @example
@c $ git add dangerous.lisp
@c @end example

@c Now, let's pretend you're done making changes. Tell git you're done
@c for now:

@c @example
@c $ git commit -a
@c @end example

@c This will open up a prompt in your editor of choice for you to
@c describe your changes. Try to keep the first line short, and then add
@c more explanation underneath (for an example, run the command @command{git log}
@c and take a look at some of the longer commit explanations). Save that
@c file and then do this:

@c @example
@c $ git checkout master
@c $ ls
@c @end example

@c Then look for your new file. It's not there! That's because you've
@c done all of your work in another branch, which git is currently hiding
@c from you so that you can ``check out'' the branch called ``master.'' All
@c is as it should be--your master repository is still safe.

@c @example
@c $ git checkout experimental
@c @end example

@c Now, delete @file{manual.lisp} and @file{dswm.texi}. That's right. Wipe them off
@c the face of the Earth, or at least off the hard drive of your
@c computer. When you're done, you don't have to tell git you've deleted
@c them; it'll figure it out on its own (though things may not compile
@c properly unless you edit @file{Makefile.in} and @file{dswm.asd}. Anyway, go ahead
@c and edit @file{core.lisp} and @file{user.lisp}. Really break 'em. Run free! When
@c you're done, do another commit, as above, and give it a stupid title
@c like ``lolz i b0rked stUmpwm guys wTF!?!?!!111!'' Now try to compile.
@c Just try. It won't work. If it does, you're some kind of savant or
@c something. Keep up the good work. If you've actually managed to break
@c DSWM like you were supposed to, never fear! You have two options at
@c this point.

@c One is to go back to the master branch (with another git checkout) and
@c just delete your experimental branch, like so:

@c @example
@c $ git branch -D
@c @end example

@c The ``@code{-D}'' means to force a delete, even if the changes you've made
@c aren't available elsewhere. A ``@code{-d}'' means to delete the branch if and
@c only if you've merged the changes in elsewhere.

@c The other option is to create patches for each of your commits so far,
@c delete the branch, and then apply any working/wanted patches in a new
@c branch. Create your patches (after committing) like so:

@c @example
@c $ git format-patch -o patches origin
@c @end example

@c (Before doing that you can review your changes with @command{git log origin..})

@c You can also use the @command{format-patch} command to create a patch of working
@c code to send in to the mailing list.

@c A developer might ask you to try out something they're working on. To
@c fetch their master branch, you'd do this:

@c @example
@c $ git remote add -f -m master -t master foo git://bar.org/~foo/dswm
@c @end example

@c Here, ``foo'' is the shorthand name you'll use to refer to that
@c repository in the future. To checkout a local copy of that repository,
@c you'd then do

@c @example
@c $ git checkout --track -b foo-master foo/master
@c @end example

@c Later you could use @command{git pull foo} to update while looking at that
@c branch (and note that @command{git pull} with no arguments, in the master
@c branch, will update your DSWM from the official repository).

@c Finally, if you want to move your experimental changes into your
@c master branch, you'd checkout your master branch and run:

@c @example
@c $ git merge experimental
@c @end example

@c If there are file conflicts, @command{git diff} will show you where they are;
@c you have to fix them by hand. When you're done, do another

@c @example
@c $ git commit -a
@c @end example

@c to finalize the changes to your master branch. You can then delete
@c your experimental branch. Alternately, you can wait until your changes
@c (assuming you sent them in) make it into the official repository
@c before deleting your experimental branch.

@c @node Sending Patches,  , Using git with DSWM, Hacking
@c @section Sending Patches
@c When sending patches to the mailing list for inclusion in DSWM,
@c there are a few guidelines that will make everything go smoother.

@c @itemize
@c @item
@c Make sure it applies clean to the main git repository

@c @item
@c Ensure that you aren't introducing tabs, extra blank lines, or whitespace at the end of lines.

@c @item
@c Ensure your patch doesn't contain irrelevant indenting or reformatting changes.

@c @item
@c Try to make your patch address a single issue. If your patch changes
@c two unrelated issues, break them into two seperate patches that can
@c stand on their own.

@c @item
@c Don't send intermediate patches. When you're working on a feature you
@c might make several commits to your local repository as you refine it
@c and work out the bugs. When it's polished and ready to ship, send it
@c as one patch! Sometimes it makes sense to send it as multiple patches
@c if each patch contains a discrete feature or bug fix that can stand on
@c its own. If one of your patches changes code that was added or
@c modified in an earlier patch, consider merging them together and
@c sending them as one.

@c @end itemize

@c @node Command and Function Index, Variable Index, Hacking, Top
@c @unnumbered Command and Function Index
@c @printindex fn

@c @node Variable Index,  , Command and Function Index, Top
@unnumbered Variable Index
@printindex vr

@bye
