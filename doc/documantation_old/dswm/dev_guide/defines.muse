* Functions, macros, classes and methods list
*** File: module.lisp.in
***function*** modules-list ()
***function*** find-module (name)

*** File: workarounds.lisp
***function*** get-wm-class (window)
***function*** get-wm-class (window)
***macro*** WITH-GCONTEXT ((gcontext &rest options) &body body)

*** File: user.lisp
***function*** restarts-menu (err)
***function*** banish-pointer (&optional (where *banish-pointer-to*))
***function*** programs-in-path (&optional full-path (path (split-string (getenv "PATH") ":")))
***function*** rehash (&optional (paths (mapcar 'parse-namestring (split-string (getenv "PATH") ":"))))
***function*** complete-program (base)
***function*** run-shell-commands (&rest commands)
***function*** send-meta-key (screen key)
***function*** find-matching-windows (props all-groups all-screens)
***function*** run-or-raise (cmd props &optional (all-groups *run-or-raise-all-groups*) (all-screens *run-or-raise-all-screens*))
***function*** run-or-pull (cmd props &optional (all-groups *run-or-raise-all-groups*)
***macro*** defprogram-shortcut (name &key (command (string-downcase (string name)))

*** File: screen.lisp
***function*** translate-id (src src-start src-end font dst dst-start)
***function*** screen-x (screen)
***function*** screen-y (screen)
***function*** screen-height (screen)
***function*** screen-true-height (screen)
***function*** screen-width (screen)
***function*** find-screen (root)
***function*** screen-windows (screen)
***function*** netwm-update-client-list-stacking (screen)
***function*** netwm-update-client-list (screen)
***function*** screen-add-mapped-window (screen xwin)
***function*** screen-remove-mapped-window (screen xwin)
***function*** sort-screens ()
***function*** next-screen (&optional (list (sort-screens)))
***function*** move-screen-to-head (screen)
***function*** switch-to-screen (screen)
***function*** screen-set-focus (screen window)
***function*** screen-current-window (screen)
***function*** current-window ()
***function*** register-window (window)
***function*** unregister-window (xwin)
***function*** window-by-id (id)
***function*** find-window (xwin)
***function*** find-window-by-parent (xwin &optional (windows (all-windows)))
***function*** screen-root (screen)
***function*** update-colors-for-screen (screen)
***function*** update-colors-all-screens ()
***function*** update-border-for-screen (screen)
***function*** update-border-all-screens ()
***function*** internal-window-p (screen win)
***function*** color-exists-p (color)
***function*** font-exists-p (font-name)
***macro*** set-any-color (val color)
***function*** set-fg-color (color)
***function*** set-bg-color (color)
***function*** set-border-color (color)
***function*** set-win-bg-color (color)
***function*** set-focus-color (color)
***function*** set-unfocus-color (color)
***function*** set-msg-border-width (width)
***function*** set-frame-outline-width (width)
***function*** set-font (font)
***macro*** with-current-screen (screen &body body)
***function*** current-screen ()
***function*** netwm-set-properties (screen focus-window)
***function*** init-screen (screen-number id host)

*** File: bindings.lisp
***macro*** fill-keymap (map &rest bindings)

*** File: selection.lisp
***function*** export-selection ()
***function*** set-x-selection (text)
***function*** send-selection (requestor property selection target time)
***function*** get-x-selection (&optional timeout)

*** File: keytrans.lisp
***function*** define-keysym-name (dswm-name keysym-name)
***function*** dswm-name->keysym-name (dswm-name)
***function*** keysym-name->dswm-name (keysym-name)
***function*** dswm-name->keysym (dswm-name)
***function*** keysym->dswm-name (keysym)

*** File: mode-line.lisp
***function*** mode-line-gc (ml)
***function*** screen-mode-line-format ()
***function*** add-screen-mode-line-formatter (character fmt-fun)
***function*** fmt-urgent-window-list (ml)
***function*** fmt-blink-urgent-window-list (ml)
***function*** fmt-window-list (ml)
***function*** fmt-group-list (ml)
***function*** fmt-head (ml)
***function*** fmt-group (ml)
***function*** fmt-highlight (s)
;; (***function*** fmt-blink (s)
***function*** toggle-mode-line-blink ()
***function*** fmt-solo-blink (s)
***function*** fmt-blink (s)
***function*** fmt-head-window-list (ml)
***function*** fmt-hidden (s)
***function*** fmt-head-window-list-hidden-windows (ml)
***function*** fmt-modeline-time (ml)
***function*** bar-zone-color (amount &optional (med 20) (hi 50) (crit 90) reverse)
***function*** repeat (n char)
***function*** bar (percent width full empty)
***function*** alternate (strings period)
***function*** scroll (string width delay)
***function*** make-mode-line-window (parent screen)
***function*** resize-mode-line (ml)
***method*** mode-line-format-elt ((elt string))
***method*** mode-line-format-elt ((elt symbol))
***method*** mode-line-format-elt ((elt null))
***method*** mode-line-format-elt ((elt list))
***function*** mode-line-format-string (ml)
***function*** make-mode-line-gc (window screen)
***function*** update-mode-line-color-context (ml)
***function*** make-head-mode-line (screen head format)
***function*** mode-line-current-group (ml)
***function*** redraw-mode-line (ml &optional force)
***function*** find-mode-line-window (xwin)
***function*** sync-mode-line (ml)
***function*** set-mode-line-window (ml xwin)
***function*** destroy-mode-line-window (ml)
***function*** move-mode-line-to-head (ml head)
***function*** update-mode-line-position (ml x y)
***function*** place-mode-line-window (screen xwin)
***function*** update-mode-lines (screen)
***function*** update-all-mode-lines ()
***function*** turn-on-mode-line-timer ()
***function*** all-heads ()
***function*** maybe-cancel-mode-line-timer ()
***function*** toggle-mode-line (screen head &optional (format (screen-mode-line-format)))
***function*** enable-mode-line (screen head state &optional format)

*** File: head.lisp
***function*** head-by-number (screen n)
***function*** parse-xinerama-head (line)
***function*** make-screen-heads (screen root)
***function*** copy-heads (screen)
***function*** frame-head (group frame)
***function*** group-heads (group)
***function*** tile-group-frame-head (group head)
***function*** (setf tile-group-frame-head) (frame group head)
***function*** current-head (&optional (group (current-group)))
***function*** head-windows (group head)
***function*** frame-is-head (group frame)
***function*** add-head (screen head)
***function*** remove-head (screen head)
***function*** scale-head (screen oh nh)
***function*** scale-screen (screen heads)

*** File: time.lisp
***function*** time-plist (&optional time)
***function*** time-second ()
***function*** time-minute ()
***function*** time-hour ()
***function*** time-hour-zero ()
***function*** time-hour-12hr ()
***function*** time-hour-12hr-zero ()
***function*** time-day-of-month-zero ()
***function*** time-day-of-month ()
***function*** time-month ()
***function*** time-month-name ()
***function*** time-month-shortname ()
***function*** time-year ()
***function*** time-century ()
***function*** time-year-short ()
***function*** time-day-of-week ()
***function*** time-day-of-week-sun-start ()
***function*** time-dow-name ()
***function*** time-dow-shortname ()
***function*** time-newline ()
***function*** time-tab ()
***function*** time-am-pm ()
***function*** time-am-pm-caps ()
***function*** time-tz ()
***function*** time-unix-era ()
***function*** time-date-and-time ()
***function*** time-date ()
***function*** time-date-full ()
***function*** time-12hr-time ()
***function*** time-24hr-and-minute ()
***function*** time-24hr-time ()

*** File: keysyms.lisp
***function*** define-keysym (keysym name)
***function*** keysym-name->keysym (name)
***function*** keysym->keysym-name (keysym)

*** File: floating-group.lisp
***class*** float-window (window)
***method*** (setf window-x) :before (val (window float-window))
***method*** (setf window-y) :before (val (window float-window))
***method*** (setf window-width) :before (val (window float-window))
***method*** (setf window-height) :before (val (window float-window))
***function*** float-window-move-resize (win &key x y width height (border +default-frame-outline-width+))
***method*** update-decoration ((window float-window))
***method*** window-sync ((window float-window) hint)
***method*** window-head ((window float-window))
***method*** window-visible-p ((win float-window))
***method*** (setf window-fullscreen) :after (val (window float-window))
***class*** float-group (group)
***method*** group-startup ((group float-group))
***method*** group-add-window ((group float-group) window &key &allow-other-keys)
***function*** &float-focus-next (group)
***method*** group-delete-window ((group float-group) window)
***method*** group-wake-up ((group float-group))
***method*** group-suspend ((group float-group))
***method*** group-current-window ((group float-group))
***method*** group-current-head ((group float-group))
***function*** float-window-align (window)
***method*** group-resize-request ((group float-group) window width height)
***method*** group-move-request ((group float-group) window x y relative-to)
***method*** group-raise-request ((group float-group) window type)
***method*** group-lost-focus ((group float-group))
***method*** group-indicate-focus ((group float-group))
***method*** group-focus-window ((group float-group) window)
***method*** group-root-exposure ((group float-group))
***method*** group-add-head ((group float-group))
***method*** group-sync-head ((group float-group) head)
***method*** group-button-press ((group float-group) x y (window float-window))
***method*** group-button-press ((group float-group) x y where)

*** File: tile-window.lisp
***class*** tile-window (window)
***method*** update-decoration ((window tile-window))
***method*** window-sync ((window tile-window) hint)
***method*** window-visible-p ((window tile-window))
***method*** window-head ((window tile-window))
***method*** (setf window-fullscreen) :after (val (window tile-window))
***function*** really-raise-window (window)
***function*** raise-modals-of (window)
***function*** raise-modals-of-gang (window)
***function*** raise-transients-of-gang (window)
***function*** geometry-hints (win)
***function*** maximize-window (win)
***function*** focus-next-window (group)
***function*** focus-prev-window (group)
***function*** pull-window (win &optional (to-frame (tile-group-current-frame (window-group win))))
***function*** focus-forward (group window-list &optional pull-p (predicate (constantly t)))
***function*** other-hidden-window (group)
***function*** pull-other-hidden-window (group)
***function*** other-window-in-frame (group)
***function*** exchange-windows (win1 win2)
***function*** make-rule-for-window (window &optional lock title)
***function*** make-rule-for-group (group &optional lock title)
***function*** make-rule-for-screen (screen &optional lock title)
***function*** make-rule-for-desktop (&optional lock title)

*** File: dswm.lisp
***function*** load-rc-file (&optional (catch-errors t) (reload nil))
***function*** error-handler (display error-key &rest key-vals &key asynchronous &allow-other-keys)
***function*** run-with-timer (secs repeat function &rest args)
***function*** cancel-timer (timer)
***function*** schedule-timer (timer when)
***function*** sort-timers (timers)
***function*** run-expired-timers (timers)
***function*** get-next-timeout (timers)
***function*** perform-top-level-error-action (c)
***function*** dswm-internal-loop ()
***function*** parse-display-string (display)
***function*** dswm-internal (display-str)
***function*** dswm (&optional (display-str (or (getenv "DISPLAY") ":0")))

*** File: menu.lisp
***function*** bound-check-menu (menu)
***function*** menu-up (menu)
***function*** menu-down (menu)
***function*** menu-finish (menu)
***function*** menu-abort (menu)
***function*** get-input-char (key)
***function*** menu-element-name (element)
***function*** check-menu-complete (menu key-seq)
***function*** select-from-menu (screen table &optional prompt (initial-selection 0))

*** File: message-window.lisp
***function*** max-width (font l)
***function*** get-gravity-coords (gravity width height minx miny maxx maxy)
***function*** setup-win-gravity (screen win gravity)
***function*** setup-message-window (screen lines width)
***function*** invert-rect (screen win x y width height)
***function*** unmap-message-window (screen)
***function*** unmap-all-message-windows ()
***function*** unmap-frame-indicator-window (screen)
***function*** unmap-all-frame-indicator-windows ()
***function*** reset-message-window-timer ()
***function*** reset-frame-indicator-timer ()
***function*** show-frame-outline (group &optional (clear t))
***function*** show-frame-indicator (group &optional force)
***function*** echo-in-window (win font fg bg string)
***function*** push-last-message (screen strings highlights)
***function*** redraw-current-message (screen)
***function*** echo-nth-last-message (screen n)
***function*** echo-string-list (screen strings &rest highlights)
***function*** echo-string (screen msg)
***function*** message (fmt &rest args)
***function*** err (fmt &rest args)
***function*** message-no-timeout (fmt &rest args)

*** File: fdump.lisp
***function*** dump-group (group &optional (window-dump-fn 'window-id))
***function*** dump-screen (screen)
***function*** dump-desktop ()
***function*** dump-to-file (foo name)
***function*** read-dump-from-file (file)
***function*** restore-group (group gdump &optional auto-populate (window-dump-fn 'window-id))
***function*** restore-screen (screen sdump)
***function*** restore-desktop (ddump)

*** File: window.lisp
***class*** window ()
***method*** print-object ((object window) stream)
***function*** register-urgent-window (window)
***function*** unregister-urgent-window (window)
***function*** window-clear-urgency (window)
***function*** window-urgent-p (window)
***function*** only-urgent (windows)
***function*** window-leader (window)
***function*** window-transient-for (window)
***function*** window-modal-p (window)
***function*** window-transient-p (window)
***function*** window-gang (window)
***function*** only-modals (windows)
***function*** x-of (window filter)
***function*** modals-of (window)
***function*** transients-of (window)
***function*** shadows-of (window)
***function*** only-transients (windows)
***function*** all-windows ()
***function*** visible-windows ()
***function*** top-windows ()
***function*** window-name (window)
***function*** window-id (window)
***function*** window-in-current-group-p (window)
***function*** window-screen (window)
***function*** send-client-message (window type &rest data)
***function*** fmt-window-status (window)
***function*** fmt-window-marked (window)
;; (***function*** draw-window-mark (group window)
;; (***function*** clear-window-mark (group window)
;; (***function*** update-window-mark (window)
***function*** get-normalized-normal-hints (xwin)
***function*** xwin-net-wm-name (win)
***function*** xwin-name (win)
***method*** raise-window (win)
***function*** xwin-border-width (win)
***function*** (setf xwin-border-width) (width win)
***function*** default-border-width-for-type (window)
***function*** xwin-class (win)
***function*** xwin-res-name (win)
***function*** xwin-role (win)
***macro*** define-window-slot (attr)
      (***function*** ,(intern1 (format nil "WINDOW-~a" attr)) (,win)
      (***function*** (setf ,(intern1 (format nil "WINDOW-~a" attr))) (,val ,win)
***function*** sort-windows (group)
***function*** marked-windows (group)
***function*** (setf xwin-state) (state xwin)
***function*** xwin-state (xwin)
***function*** window-hidden-p (window)
***function*** add-wm-state (xwin state)
***function*** remove-wm-state (xwin state)
***function*** window-property (window prop)
***function*** find-wm-state (xwin state)
***function*** xwin-unhide (xwin parent)
***function*** unhide-window (window)
***function*** xwin-hide (window)
***function*** hide-window (window)
***function*** xwin-maxsize-p (win)
***function*** xwin-type (win)
***function*** xwin-strut (screen win)
***function*** xwin-send-configuration-notify (xwin x y w h bw)
***function*** update-window-gravity ()
***function*** set-normal-gravity (gravity)
***function*** set-maxsize-gravity (gravity)
***function*** set-transient-gravity (gravity)
***function*** gravity-for-window (win)
***function*** window-width-inc (window)
***function*** window-height-inc (window)
***function*** set-window-geometry (win &key x y width height border-width)
***function*** find-free-window-number (group)
***function*** reparent-window (screen window)
***function*** process-existing-windows (screen)
***function*** xwin-grab-keys (win screen)
***function*** grab-keys-on-window (win)
***function*** xwin-ungrab-keys (win)
***function*** ungrab-keys-on-window (win)
***function*** xwin-grab-buttons (win)
***function*** xwin-ungrab-buttons (win)
***function*** sync-keys ()
***function*** netwm-remove-window (window)
***function*** process-mapped-window (screen xwin)
***function*** find-withdrawn-window (xwin)
***function*** restore-window (window)
***function*** withdraw-window (window)
***function*** destroy-window (window)
***function*** move-window-to-head (group window)
***function*** no-focus (group last-win)
***method*** focus-window (window)
***function*** xwin-kill (window)
***function*** select-window-from-menu (windows fmt)

*** File: events.lisp
***macro*** define-ds-event-handler (event keys &body body)
***function*** handle-mode-line-window (xwin x y width height)
***function*** handle-unmanaged-window (xwin x y width height border-width value-mask)
***function*** update-configuration (win)
***function*** read-from-keymap (kmaps &optional update-fn)
***function*** handle-keymap (kmaps code state key-seq grab update-fn)
***function*** top-maps (&optional (group (current-group)))
***function*** bytes-to-window (bytes)
***function*** handle-rp-commands (root)
***function*** handle-dswm-commands (root)
***function*** maybe-set-urgency (window)
***function*** safe-atom-name (n)
***function*** safe-bytes-to-atoms (list)
***function*** update-window-properties (window atom)
***function*** find-message-window-screen (win)
***function*** draw-cross (screen window x y width height)
***function*** activate-fullscreen (window)
***function*** deactivate-fullscreen (window)
***function*** update-fullscreen (window action)
***function*** maybe-map-window (window)
***function*** maybe-raise-window (window)
***function*** focus-all (win)
***function*** handle-event (&rest event-slots &key display event-key &allow-other-keys)


*** File: tile-group.lisp
***class*** tile-group (group)
***method*** initialize-instance :after ((group tile-group) &key &allow-other-keys)
***method*** group-startup ((group tile-group))
***method*** group-wake-up ((group tile-group))
***method*** group-delete-window ((group tile-group) window)
***method*** group-add-window ((group tile-group) window &key frame raise &allow-other-keys)
***method*** group-current-window ((group tile-group))
***method*** group-current-head ((group tile-group))
***method*** group-move-request ((group tile-group) window x y relative-to)
***method*** group-resize-request ((group tile-group) window width height)
***method*** group-raise-request ((group tile-group) window stack-mode)
***method*** group-lost-focus ((group tile-group))
***method*** group-indicate-focus ((group tile-group))
***method*** group-focus-window ((group tile-group) win)
***method*** group-button-press ((group tile-group) x y (where (eql :root)))
***method*** group-button-press ((group tile-group) x y (where window))
***method*** group-root-exposure ((group tile-group))
***method*** group-add-head ((group tile-group))
***method*** group-sync-head ((group tile-group) head)
***function*** populate-frames (group)
***function*** frame-by-number (group n)
***function*** find-frame (group x y)
***function*** frame-set-x (frame v)
***function*** frame-set-y (frame v)
***function*** frame-set-r (frame v)
***function*** frame-set-b (frame v)
***function*** frame-r (frame)
***function*** frame-b (frame)
***function*** frame-display-y (group frame)
***function*** frame-display-height (group frame)
***function*** frame-intersect (f1 f2)
***function*** frames-overlap-p (f1 f2)
***function*** frame-raise-window (g f w &optional (focus t))
***function*** focus-frame (group f)
***function*** frame-windows (group f)
***function*** frame-sort-windows (group f)
***function*** copy-frame-tree (tree)
***function*** group-frames (group)
***function*** head-frames (group head)
***function*** find-free-frame-number (group)
***function*** choose-new-frame-window (frame group)
***function*** split-frame-h (group p ratio)
***function*** split-frame-v (group p ratio)
***function*** funcall-on-leaf (tree leaf fn)
***function*** funcall-on-node (tree fn match)
***function*** replace-frame-in-tree (tree f &rest frames)
***function*** sibling-internal (tree leaf fn)
***function*** next-sibling (tree leaf)
***function*** prev-sibling (tree leaf)
***function*** closest-sibling (tree leaf)
***function*** migrate-frame-windows (group src dest)
***function*** tree-accum-fn (tree acc fn)
***function*** tree-iterate (tree fn)
***function*** tree-x (tree)
***function*** tree-y (tree)
***function*** tree-width (tree)
***function*** tree-height (tree)
***function*** tree-parent (top node)
***function*** tree-leaf (top)
***function*** tree-row-split (tree)
***function*** tree-column-split (tree)
***function*** tree-split-type (tree)
***function*** offset-tree (tree x y)
***function*** offset-tree-dir (tree amount dir)
***function*** expand-tree (tree amount dir)
***function*** join-subtrees (tree leaf)
***function*** resize-tree (tree w h &optional (x (tree-x tree)) (y (tree-y tree)))
***function*** remove-frame (tree leaf)
***function*** sync-frame-windows (group frame)
***function*** sync-all-frame-windows (group)
***function*** sync-head-frame-windows (group head)
***function*** offset-frames (group x y)
***function*** resize-frame (group frame amount dim)
***function*** balance-frames-internal (group tree)
***function*** split-frame (group how &optional (ratio 1/2))
***function*** draw-frame-outline (group f tl br)
***function*** draw-frame-outlines (group &optional head)
***function*** clear-frame-outlines (group)
***function*** draw-frame-numbers (group)
***macro*** save-frame-excursion (&body body)
***function*** split-frame-in-dir (group dir)
***function*** focus-frame-next-sibling (group)
***function*** focus-last-frame (group)
***function*** focus-frame-after (group frames)
***function*** focus-next-frame (group)
***function*** focus-prev-frame (group)
***function*** choose-frame-by-number (group)
***function*** clear-frame (frame group)
***function*** get-edge (frame edge)
***function*** neighbour (direction frame frameset)
***function*** move-focus-and-or-window (dir &optional win-p)
***function*** move-focus-and-or-window-to (frame-number &optional win-p)

*** File: window-placement.lisp
***function*** xwin-to-window (xwin)
***function*** get-or-create-rule-scanner (regex)
***function*** string-match (string pat)
***function*** window-matches-properties-p (window &key class instance type role title)
***function*** window-matches-rule-p (w rule)
***function*** rule-matching-window (window)
***function*** get-window-placement (screen window)
***function*** sync-window-placement ()
***function*** assign-window (window group &optional (where :tail))
***function*** place-window (screen window)
***function*** pick-preferred-frame (window)

*** File: scratchpad.lisp
***function*** scratchpad-init ()

*** File: package.lisp

*** File: help.lisp
***function*** columnize (list columns &key col-aligns (pad 1) (char #\Space) (align :left))
***function*** display-bindings-for-keymaps (key-seq &rest keymaps)

*** File: pathnames.lisp
***function*** component-present-p (value)
***function*** directory-pathname-p (pathspec)
***function*** pathname-as-directory (pathspec)
***function*** directory-wildcard (dirname)
***function*** clisp-subdirectories-wildcard (wildcard)
***function*** list-directory (dirname)

*** File: install-deps.lisp
***function*** test-dep (arg)
***function*** install-dep-sbcl (arg)
***function*** download-dep-clisp (dep)
***function*** install-dep-clisp (arg)

*** File: command.lisp
***macro*** defcommand (name (&rest args) (&rest interactive-args) &body body)
     (***function*** ,name ,args
***macro*** defcommand-alias (alias original)
***function*** dereference-command-symbol (command)
***function*** command-active-p (command)
***function*** get-command-structure (command &optional (only-active t))
***function*** all-commands (&optional (only-active t))
***function*** argument-line-end-p (input)
***function*** argument-pop (input)
***function*** argument-pop-or-read (input prompt &optional completions)
***function*** argument-pop-rest (input)
***function*** argument-pop-rest-or-read (input prompt &optional completions)
***macro*** ***dswm type*** (type (input prompt) &body body)
***function*** lookup-symbol (string)
***function*** select-group (screen query)
***function*** call-interactively (command &optional (input ""))
***function*** eval-command (cmd &optional interactivep)
***function*** run-commands (&rest commands)

*** File: manual.lisp
***function*** dprint (sym)
***function*** generate-function-doc (s line)
                                (format s "@***function*** {~a} ~{~a~^ ~}~%~a~&@end ***function***~%~%"
***function*** generate-macro-doc (s line)
***function*** generate-variable-doc (s line)
***function*** generate-hook-doc (s line)
***function*** generate-command-doc (s line)
***function*** generate-manual (&key (in #p"dswm.texi.in") (out #p"dswm.texi"))

*** File: test-wm.lisp
***macro*** define-test ((dpy screen) &body body)
      (***function*** ,name (,dpy ,screen)
***function*** break-display-xid-cache ()
***function*** test-wm-class (map-p)
***function*** get-wm-hints ()
***function*** parse-display-string (display)
***function*** test-wm (display-str)

*** File: kmap.lisp
***function*** make-sparse-keymap ()
***function*** lookup-command (keymap command)
***function*** lookup-key (keymap key &optional accept-default)
***function*** key-mods-p (key)
***function*** x11-mods (key &optional with-numlock with-capslock)
***function*** report-kbd-parse-error (c stream)
***function*** parse-mods (mods end)
***function*** parse-key (string)
***function*** parse-key-seq (keys)
***function*** kbd (keys)
***function*** copy-key-into (from to)
***function*** print-mods (key)
***function*** print-key (key)
***function*** print-key-seq (seq)
***function*** define-key (map key command)
***function*** undefine-key (map key)
***function*** lookup-key-sequence (kmap key-seq)
***function*** kmap-symbol-p (x)
***function*** kmap-or-kmap-symbol-p (x)
***function*** dereference-kmaps (kmaps)
***function*** search-kmap (command keymap &key (test 'equal))
***function*** push-top-map (new-top)
***function*** pop-top-map ()
***macro*** defkey-top (key cmd)
***macro*** defkeys-top (&rest keys)
***macro*** defkey-root (key cmd)
***macro*** defkeys-root (&rest keys)

*** File: core.lisp
***macro*** def-thing-attr-macro (thing hash-slot)
    `(***macro*** ,(intern1 (format nil "DEF-~a-ATTR" thing)) (,attr)
          (***function*** ,(intern1 (format nil ,(format nil "~a-~~a" thing) ,attr)) (,,obj)
          (***function*** (setf ,(intern1 (format nil ,(format nil "~a-~~a" thing) ,attr))) (,,val ,,obj)
***function*** key-to-keycode+state (key)
***function*** send-fake-key (win key)
***function*** send-fake-click (win button)
***function*** grab-pointer (screen)
***function*** ungrab-pointer ()
***function*** grab-keyboard (xwin)
***function*** ungrab-keyboard ()
***function*** warp-pointer (screen x y)
***function*** warp-pointer-relative (dx dy)
***function*** concat (&rest strings)
***function*** interactive ()
***function*** string-as-directory (dir)

*** File: test.lisp

*** File: iresize.lisp
***function*** set-resize-increment (val)
***function*** update-resize-map ()
***function*** resize-unhide ()

*** File: group.lisp
***class*** group ()
***function*** tile-group-p (group)
***function*** current-group (&optional (screen (current-screen)))
***function*** move-group-to-head (screen group)
***function*** sort-groups (screen)
***function*** fmt-group-status (group)
***function*** find-free-group-number (screen)
***function*** find-free-hidden-group-number (screen)
***function*** non-hidden-groups (groups)
***function*** netwm-group-id (group)
***function*** switch-to-group (new-group)
***function*** move-window-to-group (window to-group)
***function*** next-group (current &optional
***function*** merge-groups (from-group to-group)
***function*** netwm-group (window &optional (screen (window-screen window)))
***function*** netwm-set-group (window)
***function*** netwm-set-allowed-actions (window)
***function*** netwm-update-groups (screen)
***function*** netwm-set-group-properties (screen)
***function*** kill-group (group to-group)
***function*** add-group (screen name &key background (type *default-group-type*))
***function*** find-group (screen name)
***function*** group-forward (current list)
***function*** group-forward-with-window (current list)
***function*** echo-groups (screen fmt &optional verbose (wfmt *window-format*))

*** File: wrappers.lisp
***function*** run-prog (prog &rest opts &key args output (wait t) &allow-other-keys)
***function*** run-prog-collect-output (prog &rest args)
***function*** getenv (var)
***function*** (setf getenv) (val var)
***function*** pathname-is-executable-p (pathname)
***function*** probe-path (path)
***function*** portable-file-write-date (pathname)
***function*** print-backtrace (&optional (frames 100))
***function*** bytes-to-string (data)
***function*** string-to-bytes (string)
***function*** utf8-to-string (octets)
***function*** string-to-utf8 (string)
***function*** make-xlib-window (xobject)
***function*** lookup-error-recoverable-p ()
***function*** recover-from-lookup-error ()
***function*** directory-no-deref (pathspec)
***function*** read-line-from-sysfs (stream &optional (blocksize 80))
***function*** argv ()
***function*** execv (program &rest arguments)

*** File: primitives.lisp
***class*** screen ()
***function*** screen-message-window (screen)
***function*** screen-message-pixmap (screen)
***function*** screen-message-gc (screen)
***method*** print-object ((object frame) stream)
***function*** get-frame-number-translation (frame)
***method*** print-object ((object screen) stream)
***macro*** with-restarts-menu (&body body)
***function*** run-hook-with-args (hook &rest args)
***function*** run-hook (hook)
***macro*** add-hook (hook fn)
\(***function*** my-rad-fn (to-frame from-frame)
***macro*** remove-hook (hook fn)
***function*** conc1 (list arg)
***macro*** add-to-list (list arg)
***macro*** remove-from-list (list arg)
***function*** sort1 (list sort-fn &rest keys &key &allow-other-keys)
***function*** mapcar-hash (fn hash)
***function*** find-free-number (l &optional (min 0) dir)
***function*** remove-plist (plist &rest keys)
***function*** screen-display-string (screen &optional (assign t))
***function*** split-seq (seq separators &key test default-value)
***function*** split-string (string &optional (separators "
***function*** insert-before (list item nth)
***function*** dformat (level fmt &rest args)
***function*** redirect-all-output (file)
***function*** format-expand (fmt-alist fmt &rest args)
***function*** font-height (font)
***function*** deny-request-p (window deny-list)
***function*** list-splice-replace (item list &rest replacements)
***function*** backtrace-string ()
***macro*** define-frame-preference (target-group &rest frame-rules)
***function*** clear-window-placement-rules ()
***macro*** with-focus (xwin &body body)
***function*** data-dir ()
***function*** data-dir-file (name &optional type)
***macro*** with-data-file ((s file &rest keys &key (if-exists :supersede) &allow-other-keys) &body body)
***macro*** move-to-head (list elt)
***function*** intern1 (thing &optional (package *package*) (rt *readtable*))
***function*** unix-getenv (name &optional default)

*** File: color.lisp
***function*** adjust-color (color amt)
***function*** alloc-color (screen color)
***function*** lookup-color (screen color)
***function*** update-color-map (screen)
***function*** update-screen-color-context (screen)
***function*** get-bg-color (screen cc color)
***function*** get-fg-color (screen cc color)
***function*** set-color (screen cc s i)
***function*** render-strings (screen cc padx pady strings highlights &optional (draw t))
***function*** parse-color (s i)
***function*** parse-color-string (string)
***function*** uncolorify (string)

*** File: input.lisp
***function*** is-modifier (keycode)
***function*** keycode->character (code mods)
***function*** setup-input-window (screen prompt input)
***function*** shutdown-input-window (screen)
***function*** input-handle-key-press-event (&rest event-slots &key event-key root code state &allow-other-keys)
***function*** input-handle-selection-event (&key window selection property &allow-other-keys)
***function*** read-key-handle-event (&rest event-slots &key display event-key &allow-other-keys)
***function*** read-key-or-selection-handle-event (&rest event-slots &key display event-key &allow-other-keys)
***function*** read-key ()
***function*** read-key-no-modifiers ()
***function*** read-key-or-selection ()
***function*** make-input-string (initial-input)
***function*** completing-read (screen prompt completions &key (initial-input "") require-match)
***function*** read-one-line (screen prompt &key (initial-input "") require-match)
***function*** read-one-char (screen)
***function*** draw-input-bucket (screen prompt input &optional (tail "") errorp)
***function*** code-state->key (code state)
***function*** input-submit (input key)
***function*** input-abort (input key)
***function*** input-goto-char (input point)
***function*** input-insert-string (input string)
***function*** input-point (input)
***function*** input-validate-region (input start end)
***function*** input-delete-region (input start end)
***function*** input-insert-char (input char)
***function*** input-substring (input start end)
***function*** input-find-completions (str completions)
***function*** input-complete (input direction)
***function*** input-complete-forward (input key)
***function*** input-complete-backward (input key)
***function*** input-delete-backward-char (input key)
***function*** input-delete-forward-char (input key)
***function*** input-forward-kill-word (input key)
***function*** input-backward-kill-word (input key)
***function*** input-forward-word (input key)
***function*** input-backward-word (input key)
***function*** input-forward-char (input key)
***function*** input-backward-char (input key)
***function*** input-move-beginning-of-line (input key)
***function*** input-move-end-of-line (input key)
***function*** input-kill-line (input key)
***function*** input-kill-to-beginning (input key)
***function*** input-history-back (input key)
***function*** input-history-forward (input key)
***function*** input-self-insert (input key)
***function*** input-yank-selection (input key)
***function*** process-input (screen prompt input code state)
***function*** all-modifier-codes ()
***function*** get-modifier-map ()
***function*** update-modifier-map ()
;; (***function*** x11mod->dsmod (screen state)
***function*** mod->string (state)
;; (***function*** keycode->string (code state)
;; (***function*** cook-keycode (code state)
***function*** y-or-n-p (message)
***function*** yes-or-no-p (message)

** Contributed modules
*** File: modules/mem.lisp
***function*** get-proc-fd-field (s field)
***function*** mem-usage ()
***function*** fmt-mem-usage (ml)
***function*** fmt-mem-usage-bar (ml &optional (width *mem-usage-bar-width*) (full *mem-usage-bar-full*) (empty *mem-usage-bar-empty*))

*** File: modules/amixer.lisp
***function*** volcontrol (channel amount)
***macro*** defvolcontrol (name channel valence)

*** File: modules/cpu.lisp
***function*** current-cpu-usage ()
***function*** fmt-cpu-usage (ml)
***function*** fmt-cpu-usage-bar (ml &optional (width *cpu-usage-bar-width*) (full *cpu-usage-bar-full*) (empty *cpu-usage-bar-empty*))
***function*** get-proc-file-field (fname field)
***function*** fmt-cpu-freq (ml)
***function*** fmt-cpu-temp (ml)

*** File: modules/net.lisp
***function*** now ()
***function*** find-default ()
***function*** net-device ()
***function*** net-sys-stat-read (device stat-file)
***function*** net-usage ()
***function*** fmt-net-usage (ml)
    (***function*** kbmb (x y)

*** File: modules/disk.lisp
***function*** disk-usage-tokenize (usage-line-str)
***function*** disk-update-usage (paths)
***function*** disk-usage-get-field (path field-number)
***function*** disk-get-device (path)
***function*** disk-get-size (path)
***function*** disk-get-used (path)
***function*** disk-get-available (path)
***function*** disk-get-use-percent (path)
***function*** disk-get-mount-point (path)
***function*** disk-modeline (ml)

*** File: modules/battery-portable.lisp
***class*** battery-method ()
***function*** preferred-battery-method ()
***class*** battery ()
  (***class*** procfs-method (battery-method)
  (***class*** procfs-battery (battery)
  (***method*** update-info ((battery procfs-battery))
  (***method*** info-value ((battery procfs-battery) key)
  (***method*** info-value-int ((battery procfs-battery) key)
  (***method*** all-batteries ((method procfs-method))
  (***method*** state-of ((battery procfs-battery))
  (***class*** sysfs-method (battery-method)
  (***class*** sysfs-battery (battery)
  (***function*** sysfs-field-exists? (path name)
  (***function*** sysfs-field (path name)
  (***function*** sysfs-int-field (path name)
  (***function*** sysfs-int-field-or-nil (path name)
  (***method*** all-batteries ((m sysfs-method))
  (***method*** state-of ((battery sysfs-battery))
***function*** fmt-time (stream arg colonp atp)
***function*** battery-info-string ()
  (***function*** fmt-bat (ml)

*** File: modules/wifi.lisp
***macro*** ***function***-cached (name interval arglist &body body)
       (***function*** ,name ,arglist
***function*** guess-wireless-device ()
***function*** read-wifi-info (device what)
***function*** read-wifi-info-int (device what)
***function***-cached fmt-wifi 5 (ml)

*** File: modules/web.lisp
***function*** find-by-car (name body)
***function*** find-by-cdr (name body)
***function*** get-engines-list (name body)
***function*** find-engine-parameters (name type location)
***function*** get-current-location ()
***function*** run-engine-with-key (engine type)
***function*** get-hyperbookmark-names-list (&optional (list *hyperbookmarks-list*))
***function*** get-browsers-list ()
***function*** find-hyperbookmark (&key name browser url (list *hyperbookmarks-list*))
***macro*** find-hyperbookmark-by-name (name)
***macro*** find-hyperbookmark-by-browser (browser)
***macro*** find-hyperbookmark-by-url (url)
***function*** dump-hyperbookmarks (&optional (hbdump *hyperbookmarks-list*))

*** File: modules/maildir.lisp
***function*** maildir-set-update-time (time-in-seconds)
***function*** maildir-mailboxes (maildir)
***function*** maildir-mailbox-dir (mailbox dir-name)
***function*** update-maildir-infos ()
***function*** maildir-modeline (ml)
***function*** maildir-get-new ()
***function*** maildir-get-cur ()
***function*** maildir-get-tmp ()

*** File: modules/productivity.lisp
***function*** productivity-mode-on ()
***function*** productivity-mode-off ()

*** File: modules/mpd.lisp
***macro*** with-mpd-connection (&body body)
***function*** mpd-send (command)
***function*** mpd-send-command (cmd)
***function*** mpd-format-command (fmt &rest args)
***function*** mpd-termination-p (str)
***function*** mpd-error-p (str)
***function*** mpd-ok-p (str)
***function*** mpd-tokenize (str)
***function*** assoc-value (name list)
***function*** mpd-receive ()
***function*** init-mpd-connection ()
***function*** mpd-ping ()
***function*** mpd-search (type what &optional (exact-search nil))
***function*** mpd-add (files)
***function*** mpd-update-current-song ()
***function*** mpd-update-status ()
***function*** mpd-get-artist ()
***function*** mpd-get-album ()
***function*** mpd-get-date ()
***function*** mpd-minutes-seconds (time)
***function*** mpd-get-elapsed ()
***function*** mpd-get-length ()
***function*** mpd-get-status ()
***function*** mpd-get-file ()
***function*** mpd-get-volume ()
***function*** mpd-get-xfade ()
***function*** mpd-get-genre ()
***function*** mpd-get-number ()
***function*** mpd-get-playlistlength ()
***function*** mpd-repeating-p ()
***function*** mpd-get-repeat ()
***function*** mpd-shuffle-p ()
***function*** mpd-get-shuffle ()
***function*** mpd-get-title ()
***function*** mpd-get-track ()
***function*** mpd-get-song-name ()
***function*** mpd-modeline (ml)
***function*** mpd-menu (title options keymap &optional initial-selection)
***function*** mpd-selected-item (menu)
***function*** mpd-menu-action (action-type)
***function*** mpd-uniq-and-sort-list (list criteria &optional do-sort)

*** File: modules/notifications.lisp
;; (***function*** th-rcirc-notification (process sender response target text)
;; (***function*** th-notifications-add (str)
***function*** notifications-as-string (&rest r)

*** File: modules/battery.lisp
***function*** read-battery-file (battery fname)
***function*** current-battery-charge ()
***function*** fmt-bat-charge (ml)
;; (***function*** fmt-bat-charge (ml)

*** File: modules/aumix.lisp
***function*** assert-ret (val)
***function*** process-aumix-volstring (output)
***function*** aumix-call (channel op amount)
***function*** aumix-get (channel)

*** File: modules/dswm-mode.el
            (define-key m (kbd "C-M-x") 'dswm-eval-***function***)
***function*** dswm-eval-region (start end)
***function*** dswm-eval-***function*** ()
    (end-of-***function***)
      (beginning-of-***function***)
***function*** dswm-eval-last-sexp ()

*** File: modules/g15-keysyms.lisp
***function*** g15-original ()
***function*** g15-revised () ;; the orange version

*** File: modules/window-tags.lisp
***function*** string-split-by-spaces (x)
***function*** (setf window-tags) (newtags &optional (argwin nil))
***function*** clear-tags-if (clearp &optional (argwin nil))
***function*** tags-from (argtags &optional (argwindow nil))
***function*** select-by-tags (argtags &optional (without nil))
***function*** move-windows-to-group (windows &optional (arggroup nil))
***function*** window-number-from-tag (window)
